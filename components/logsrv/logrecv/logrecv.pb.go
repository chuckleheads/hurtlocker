// Code generated by protoc-gen-go. DO NOT EDIT.
// source: components/logsrv/logrecv/logrecv.proto

/*
Package logrecv is a generated protocol buffer package.

It is generated from these files:
	components/logsrv/logrecv/logrecv.proto

It has these top-level messages:
*/
package logrecv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hurtlocker_logsrv_logrecv_request "github.com/chuckleheads/hurtlocker/components/logsrv/logrecv/request"
import hurtlocker_logsrv_logrecv_response "github.com/chuckleheads/hurtlocker/components/logsrv/logrecv/response"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LogRecv service

type LogRecvClient interface {
	ReceiveLogs(ctx context.Context, opts ...grpc.CallOption) (LogRecv_ReceiveLogsClient, error)
}

type logRecvClient struct {
	cc *grpc.ClientConn
}

func NewLogRecvClient(cc *grpc.ClientConn) LogRecvClient {
	return &logRecvClient{cc}
}

func (c *logRecvClient) ReceiveLogs(ctx context.Context, opts ...grpc.CallOption) (LogRecv_ReceiveLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LogRecv_serviceDesc.Streams[0], c.cc, "/hurtlocker.logsrv.logrecv.LogRecv/ReceiveLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logRecvReceiveLogsClient{stream}
	return x, nil
}

type LogRecv_ReceiveLogsClient interface {
	Send(*hurtlocker_logsrv_logrecv_request.LogLine) error
	CloseAndRecv() (*hurtlocker_logsrv_logrecv_response.LogSummary, error)
	grpc.ClientStream
}

type logRecvReceiveLogsClient struct {
	grpc.ClientStream
}

func (x *logRecvReceiveLogsClient) Send(m *hurtlocker_logsrv_logrecv_request.LogLine) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logRecvReceiveLogsClient) CloseAndRecv() (*hurtlocker_logsrv_logrecv_response.LogSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(hurtlocker_logsrv_logrecv_response.LogSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for LogRecv service

type LogRecvServer interface {
	ReceiveLogs(LogRecv_ReceiveLogsServer) error
}

func RegisterLogRecvServer(s *grpc.Server, srv LogRecvServer) {
	s.RegisterService(&_LogRecv_serviceDesc, srv)
}

func _LogRecv_ReceiveLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogRecvServer).ReceiveLogs(&logRecvReceiveLogsServer{stream})
}

type LogRecv_ReceiveLogsServer interface {
	SendAndClose(*hurtlocker_logsrv_logrecv_response.LogSummary) error
	Recv() (*hurtlocker_logsrv_logrecv_request.LogLine, error)
	grpc.ServerStream
}

type logRecvReceiveLogsServer struct {
	grpc.ServerStream
}

func (x *logRecvReceiveLogsServer) SendAndClose(m *hurtlocker_logsrv_logrecv_response.LogSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logRecvReceiveLogsServer) Recv() (*hurtlocker_logsrv_logrecv_request.LogLine, error) {
	m := new(hurtlocker_logsrv_logrecv_request.LogLine)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LogRecv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hurtlocker.logsrv.logrecv.LogRecv",
	HandlerType: (*LogRecvServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveLogs",
			Handler:       _LogRecv_ReceiveLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "components/logsrv/logrecv/logrecv.proto",
}

func init() { proto.RegisterFile("components/logsrv/logrecv/logrecv.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0x3f, 0x8f, 0x82, 0x40,
	0x10, 0xc5, 0x73, 0xcd, 0x5d, 0xc2, 0x75, 0x74, 0xc7, 0x17, 0x38, 0x63, 0x31, 0x6b, 0xb4, 0x35,
	0x16, 0xd6, 0x5b, 0x61, 0x67, 0x07, 0xe3, 0x64, 0x97, 0xc0, 0xee, 0xe0, 0xfe, 0x4b, 0xfc, 0xf6,
	0x06, 0x21, 0x1a, 0x0a, 0xa8, 0xa6, 0xf9, 0xbd, 0xdf, 0x7b, 0x93, 0xfd, 0x23, 0x9b, 0x9e, 0x2d,
	0xd9, 0xe0, 0x45, 0xc7, 0xca, 0xbb, 0x34, 0x1c, 0x47, 0xf8, 0xbe, 0xd0, 0x3b, 0x0e, 0x9c, 0xff,
	0xe9, 0xe8, 0x42, 0xc7, 0xd8, 0x92, 0x83, 0x11, 0x84, 0x09, 0x28, 0xc4, 0xb2, 0xc3, 0xd1, 0x3d,
	0x92, 0x0f, 0x73, 0x57, 0xb1, 0x5b, 0x0b, 0xf8, 0x9e, 0xad, 0xa7, 0x79, 0x62, 0x9f, 0xb2, 0x1f,
	0xc9, 0xaa, 0x24, 0x4c, 0x79, 0x9b, 0xfd, 0x96, 0x84, 0xd4, 0x24, 0x92, 0xac, 0x7c, 0xbe, 0x85,
	0xc5, 0x61, 0x30, 0xb5, 0x83, 0x64, 0x25, 0x1b, 0x4b, 0x05, 0xac, 0xb2, 0x63, 0xf1, 0x00, 0x5f,
	0xa2, 0x31, 0x95, 0x7b, 0x6c, 0xbe, 0xce, 0xa7, 0xeb, 0x51, 0x35, 0x41, 0xc7, 0x1a, 0x90, 0x8d,
	0x40, 0x1d, 0xb1, 0xed, 0x48, 0x53, 0x75, 0xf3, 0xe2, 0xa3, 0x5a, 0xfe, 0xbf, 0xfe, 0x7e, 0xcd,
	0x3f, 0x3c, 0x03, 0x00, 0x00, 0xff, 0xff, 0x75, 0xb2, 0x56, 0x89, 0x67, 0x01, 0x00, 0x00,
}
